#!/usr/bin/env python

import os.path
import sys

import json

from types import ModuleType
from types import FunctionType
from types import ClassType

SYNDOC = "Syndoc"
print "[N]: [%s] Initilizing..." % SYNDOC

toDocument = [
	"./Syn/",
]

def fetchDocsFromDict(dickt):
	ret = {}
	for x in dickt:
		if x[:1] != "_":
			doc_payload = { x : dickt[x].__doc__ }
			if isinstance(dickt[x], FunctionType):
				ret[x] = doc_payload
			if isinstance(dickt[x], ClassType):
				ret[x] = doc_payload
				ret[x]['members'] = fetchDocsFromDict(dickt[x].__dict__)
	return ret


def fetchDocs(path):
	folder = os.path.abspath(path)
	print folder

	ret = {}

	sys.path.append(folder)
	to_import = [f for f in os.listdir(folder) if not f.endswith(".pyc")]
	for mod in to_import:
	        if mod.endswith(".py"):
	                name = mod [:-3]
	                mod = __import__(name)
			funs = mod.__dict__
			ret[mod.__name__] = fetchDocsFromDict(funs)
	
	return ret

for n in toDocument:
	shaz = fetchDocs(n)
	fd = open("json-doc-dump", "w")
	fd.write(json.dumps(shaz))
	fd.close()

